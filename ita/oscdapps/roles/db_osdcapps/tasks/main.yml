---
# This playbook contains common plays for setting up a DB server for osdcapps/Stein Vidar

- name: Install MariaDB 10 from SCL + Apache from std repo
  yum: name={{ item }}  state=present
  tags: mariadb
  with_items: "{{ yum_pkgs_db }}"
  when: ansible_lsb.major_release == "7" and ansible_lsb.id == "RedHatEnterpriseServer"

- name: register a variable for mount point
  set_fact: fsmd={{ item.mount }} fstype={{ item.fstype }}
  with_items: "{{ ansible_mounts }}"
  when: item.mount == mariadb10_datadir

- name: register a variable for XFS check on /dev/{{ dbdisk }}
  stat: path=/dev/{{ dbdisk }}
  register: fsondbdisk

- debug: var=fsondbdisk
- debug: var=fsmd
- debug: var=fstype

- name: Create a new XFS filesystem on {{ dbdisk }}, avoid LVM usage due to performance reasons 
  filesystem: fstype={{ filesystem }} dev=/dev/{{ dbdisk }} force=no
# when: fsmd != mariadb10_datadir
  when: fsondbdisk.stat.exists == True
# ignore_errors: yes

- name: Create home directory for osdcapps 
  file: path=/astro/{{ ansible_hostname }}/{{ homefolder }}/{{ user_osdcapps }} state=directory owner={{ user_osdcapps }} group={{ group_osdcapps }}   mode={{ mount_data_path_mode }} 

# MOUNT {{ dbdisk }} to MariaDB's datadir
- name: Mount MariaDB\'s datadir 
  mount: path={{ mariadb10_datadir }} src=/dev/{{ dbdisk }} fstype={{ filesystem }} opts=noatime,nodiratime,nobarrier state=mounted
  when: ansible_hostname in srvhas_md0
  notify:
    - restoresecontext
    
- name: Make sure 'mysql' owns  {{ mariadb10_datadir}}
  file: path={{ mariadb10_datadir }} owner=mysql group=mysql mode="u=rwx,g=rx,o=rx" 
  ignore_errors: yes

- name: change ulimit upper limits
  copy: src=templates/limit.js dest=/etc/security/limits.d/20-nproc.conf

- name: Steinhh can manage MariaDB
  template: src=templates/mariadb_steinhh.xml.j2 dest=/etc/sudoers.d/mariadb_steinhh force=no
#  when: ansible_hostname in sdc_fsservers

- name: Create /etc/systemd/system/rh-mariadb100-mariadb.service.d/
  file: path=/etc/systemd/system/rh-mariadb100-mariadb.service.d state=directory
  ignore_errors: yes
- name : Set MariaDB systemd service ulimit to 10K
  copy: src=templates/mariadb_systemd_limit.j2 dest=/etc/systemd/system/rh-mariadb100-mariadb.service.d/limits.conf  backup=yes  
# notify: systemd daemon_reload   
  ignore_errors: yes

- name: Create custom firewall service definitions from template
  copy: src=templates/{{ item }} dest=/etc/firewalld/services/{{ item | basename | regex_replace('\.j2','') }} backup=yes
  with_items: 
  - sdc-patchserv.xml.j2
  - rsync.xml.j2
  notify:
    - restart firewalld

- meta: flush_handlers
    
- name: Add custom firewall services and enable them	     
  firewalld: service={{ item }} permanent=true state=enabled
  with_items:
  - sdc-patchserv
  - rsync
  notify:
    - restart firewalld

- name: Set ACL permissions to steinhh & osdcapps for div paths \#1
  acl: name={{ item.path }} entity={{ item.username }} permissions=rwx etype=user state=present recursive=yes 
  with_items:
  - { path: '/etc/opt/rh/rh-mariadb100/my.cnf.d', username: 'steinhh' }
  ignore_errors: yes

- name: Create /usr/local/mysql with the owner steinhh
  file: path=/usr/local/mysql/lib state=directory force=yes owner=steinhh group=steinhh

- name: Some symlinking for MariaDB part 1
  file: src=/usr/local/mysql/lib/plugin/{{ item }} dest=/opt/rh/rh-mariadb100/root/usr/lib64/mysql/plugin/{{ item }} state=link force=yes
  with_items:
  - ha_bitmap.so
  - ha_scalarray.so
  - udfs.so
- name: Some symlinking for MariaDB part 2
  file: src=/usr/local/mysql/lib/{{ item }} dest=/lib64/{{ item }} state=link force=yes
  with_items:
  - libengine_tools.so 

- name: Set correct SELinux context for /astro/{{ ansible_hostname }}/{{ fsdatalv }}/{{ user_osdcapps }}
  shell: /usr/sbin/semanage fcontext -a -e /home /astro/{{ ansible_hostname }}/{{ fsdatalv }}/{{ user_osdcapps }} && /usr/sbin/restorecon -Rv /astro/{{ ansible_hostname }}/{{ fsdatalv }}/{{ user_osdcapps }}
  ignore_errors: yes

#Fixed with notify on mount
#- name: Restorecontext for {{ mariadb10_datadir }}
#  shell: /usr/sbin/restorecon -Rv {{ mariadb10_datadir }}
#  ignore_errors: yes

- name: Create the mount point /astro/{{ server_sdc_fs }}/{{ mountpoint_d1 }} for certain DB servers
  file: path="/astro/{{ server_sdc_fs }}/{{ mountpoint_d1 }}" state=directory mode="{{ mount_data_path_mode }}"
  when:
    ansible_hostname in ["sdc-db", "acruxdb"] 

- name: Mount sdc-fs:/astro/{{ server_sdc_fs }}/{{ mountpoint_d1 }} to /astro/{{ server_sdc_fs }}/d1
  mount: name="/{{ institute_short }}/{{ server_sdc_fs }}/{{ mountpoint_d1 }}" src={{ server_sdc_fs }}:{{ sdc_fs_nfs_path }} fstype=nfs state=mounted opts="local_lock=none,lookupcache=none" 
  ignore_errors: true 
  when:
    ansible_hostname in ["sdc-db", "acruxdb"] 

- name: Create the mount point /astro/{{ server_astro_sdc_fs }}/{{ mountpoint_d1 }} for certain DB servers
  file: path="/astro/{{ server_astro_sdc_fs }}/{{ mountpoint_d1 }}" state=directory mode="{{ mount_data_path_mode }}"
  when:
    ansible_hostname in ["astro-sdc-db"]

- name: Mount astro_sdc_fs:/astro/{{ server_astro_sdc_fs }}/{{ mountpoint_d1 }} to /astro/{{ server_astro_sdc_fs }}/d1
  mount: name="/{{ institute_short }}/{{ server_astro_sdc_fs }}/{{ mountpoint_d1 }}" src={{ server_astro_sdc_fs }}:{{ astro_sdc_fs_nfs_path }} fstype=nfs state=mounted opts="local_lock=none,lookupcache=none" 
  ignore_errors: true
  when: 
    ansible_hostname in ["astro-sdc-db"] 

- name: Enable and start MariaDB service
  systemd: name={{ item }} state=started enabled=yes daemon_reload=yes
  with_items:
   - rh-mariadb100-mariadb.service
  ignore_errors: yes



