---
# This playbook contains common plays for setting up FS servers for osdcapps/Stein Vidar

# Create a logical volume of 100% disk size .
- name: Create LVM LV for FS data disk
  lvol: vg={{ datavg }} lv={{ datalv_name }} size={{ datalv_size }} pvs={{ datapv_name }}

- name: Create a new XFS filesystem on the LV
  filesystem: fstype={{ filesystem }} dev=/dev/{{ datavg }}/{{ datalv_name }} force=yes

- name: Create the mount point
  file: path=/astro/{{ ansible_hostname }}/{{ datalv_name }} state=directory mode={{ mount_data_path_mode }} 

- name: Mount the LV 
  mount: name=/astro/{{ ansible_hostname }}//{{ datalv_name }} src=/dev/mapper/{{ datavg }}-{{ datalv_name }} fstype={{ filesystem }} state=present

- name: Create a home directory for {{ user_sdc }} (sdc)
  file: path=/astro/{{ ansible_hostname }}//{{ datalv_name  }}/{{ user_sdc}} state=directory mode={{ mount_data_path_mode }} owner={{ user_sdc }} group={{ group_sdc }}

- name: Create a home directory for {{ user_osdcapps }} (osdcapps)
  file: path=/astro/{{ ansible_hostname }}//{{ datalv_name  }}/{{ user_osdcapps }} state=directory mode={{ mount_data_path_mode }} owner={{ user_osdcapps }} group={{ groups_osdcapps }}

#   semanage fcontext -a -e /home /astro/osdc-db/d1/osdcapps &&  restorecon -Rv /astro/osdc-db/d1/osdcapps
- name: Set correct SELinux context for /astro/{{ ansible_hostname }}/{{ datalv_name }}/{{ user_osdcapps }}
  shell: /usr/sbin/semanage fcontext -a -e /home /astro/{{ ansible_hostname }}/{{ datalv_name }}/{{ user_osdcapps }} && /usr/sbin/restorecon -Rv /astro/{{ ansible_hostname }}/{{ datalv_name }}/{{ user_osdcapps }}

- name: Set correct SELinux context (system_u:object_r:httpd_sys_content_t:s0) for /astro/{{ ansible_hostname }}/{{ datalv_name }}/{{ user_sdc }}
  shell: /usr/sbin/semanage fcontext -a -t httpd_sys_content_t  /astro/{{ ansible_hostname }}/{{ datalv_name }}/{{ user_sdc }} && /usr/sbin/restorecon -Rv /astro/{{ ansible_hostname }}/{{ datalv_name }}/{{ user_sdc }}

- name: Mount the disks in fstab
  shell: mount -a

# NFS server setup
- name: Install NFS server config file
  template: src=nfs_exportfs.j2 dest=/etc/exportfs
  when: ansible_hostname in sdc_fsservers

- name: Enable & start NFS service
  service: name=fs-server.service state=started enabled=yes
  when: ansible_hostname in sdc_fsservers
  ignore_errors: yes

# Firewall 

- name: Add NFS service and restart firewalld
  firewalld: service={{ item }} permanent=true state=enabled
  with_items:
  - nfs
  notify:
  - restart firewalld

  


